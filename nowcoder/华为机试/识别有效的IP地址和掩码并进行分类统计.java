/**
* 题目描述
* 请解析IP地址和对应的掩码，进行分类识别。要求按照A/B/C/D/E类地址归类，不合法的地址和掩码单独归类。
* 所有的IP地址划分为 A,B,C,D,E五类
* A类地址1.0.0.0~126.255.255.255;
* B类地址128.0.0.0~191.255.255.255;
* C类地址192.0.0.0~223.255.255.255;
* D类地址224.0.0.0~239.255.255.255；
* E类地址240.0.0.0~255.255.255.255
* 
* 私网IP范围是：
* 10.0.0.0～10.255.255.255
* 172.16.0.0～172.31.255.255
* 192.168.0.0～192.168.255.255
*
* 子网掩码为二进制下前面是连续的1，然后全是0。（例如：255.255.255.32就是一个非法的掩码）
*
* 输入描述：
* 多行字符串。每行一个IP地址和掩码，用~隔开。
*
* 输出描述：
* 统计A、B、C、D、E、错误IP地址或错误掩码、私有IP的个数，之间以空格隔开。
*
* 示例
*   输入
*   10.70.44.68~255.254.255.0
*   1.0.0.1~255.0.0.0
*   192.168.0.2~255.255.255.0
*   19..0.~255.255.255.0
*   输出
*   1 0 1 0 0 2 1
*
*/

import java.util.*;
import java.util.regex.*;

public class Main {
    Scanner cin = new Scanner(System.in);
    public static void main(String[] args) {
        new Main().run();
    }
    
    String[] ip = {
        "(0+)(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "(127)(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "(([1-9])|([1-9]\\d)|(1[0-1]\\d)|(12[0-6]))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "((12[8-9])|(1[3-8]\\d)|(19[0-1]))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "((19[2-9])|(2[0-1]\\d)|(22[0-3]))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "((22[4-9])|(23\\d))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "((24\\d)|(25[0-5]))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        
        "(10)(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){3}",
        "(172)(.((1[6-9])|(2\\d)|(3[0-1])))(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){2}",
        "(192)(.168)(.((\\d{1,2})|(1\\d\\d)|(2[0-4]\\d)|(25[0-5]))){2}"
    };
    String mark = "((((128)|(192)|(224)|(240)|(248)|(252)|(254)|(254)|(255))(.0+){3})|" + 
        "(255.((128)|(192)|(224)|(240)|(248)|(252)|(254)|(255))(.0+){2})|" +
        "(255.255.((128)|(192)|(224)|(240)|(248)|(252)|(254)|(255)).0+)|" + 
        "(255.255.255.((128)|(192)|(224)|(240)|(248)|(252)|(254))))";
    
    void run() {
        int[] ans = new int[ip.length];
        while(cin.hasNext()) {
           String ss = cin.next().trim();
           boolean flag = false;
            for(int i=0; i<ip.length; i++) {
                String regex = ip[i] + "~" + mark;
                if(ss.matches(regex)) {
                    flag = true;
                    if(i > 1) ans[i]++;
                }
            }
            if(!flag) ans[0]++;
        }
        ans[7] += ans[8]+ans[9];
        System.out.println(ans[2]+" "+ans[3]+" "+ans[4]+" "+ans[5]+" "+ans[6]+" "+ans[0]+" "+ans[7]);
    }
}
